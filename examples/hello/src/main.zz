using identity::{some_helper};
using aye;
using error;
using fl;

thread_local mutable float wee = 0.1;

atomic mutable int bob = 932;

pub fn gimme_wee(aye::bob* lol) -> float {
    bob += (int)lol;
    return wee;
}

export fn main() -> int {
    error_Error err = {0};
    uint32_t bob;

    wee += 0.1;

    flsomething();

    return some_helper(&err, &bob);
}



export fn flsomething() {
    fl_MAKE(b, 8, 1000);

    for (int i = 0; i < 10; i++) {
        fl_alloc(b);
    }
}


using libc::stdbool::{bool};
static bool horst = false;
