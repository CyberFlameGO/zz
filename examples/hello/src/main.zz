using identity::{some_helper};
using libc::stdint::{uint32_t};
using aye;
using error;
using fl;

thread_local mutable float wee = 0.1;
atomic mutable uint32_t bargh = 932;
static mutable uint32_t bob = 932;

pub fn gimme_wee(aye::bob* lol) -> float {
    bob += (int)lol;
    return wee;
}

export fn main() -> int {
    error::Error err;
    uint32_t bob;

    wee += 0.1;

    flsomething();

    return some_helper(&err, &bob);
}


fn boop() {
}


export fn flsomething() {
    fl::MAKE(b, 8, 1000);

    for (int i = 0; i < 10; i+=1) {
        fl::alloc(b);
    }
}


using libc::stdbool::{bool, false};
static bool horst = false;
