using <stdio.h>::{printf};
using identity::{some_helper};
using aye;
using err;

thread_local f32 mut wee = 0.1;
atomic u32 mut bargh = 932;

struct Bob {
    char a;
    char b;
};
static u32 mut bob = 932;
static Bob mut stbob = Bob{
    a: 2,
};

pub fn gimme_wee(aye::bob * unsafe lol) -> f32 {
    bob += (u32)lol;
    return wee;
}

export fn main() -> int {
    err::Err mut e = {0};
    u32 bob;

    wee += 0.1;

    flsomething();

    if some_helper(&e, &bob) == 41 {
        return 0;
    } else {
        return 1;
    }
}


fn boop() {
}


export fn flsomething() {

    printf("static struct initialization Bob should be 2,0: %d,%d\n", stbob.a, stbob.b);

    //fl::MAKE(b, 8, 1000);
    //for (int mut i = 0; i < 10; i+=1) {
    //    fl::alloc(b);
    //}
}


using <stdbool.h>::{bool, false};
static bool horst = false;
