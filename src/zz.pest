WHITESPACE  = _{ " " | NEWLINE}
COMMENT     = _{
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/") |
    ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE)
}


// literals

alpha       = { 'a'..'z' | 'A'..'Z' }
digit       = { '0'..'9' }
hexdigit    = { '0'..'9' | 'a'..'f' }

string_literal  = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }
char_literal    = @{ "'" ~ ( "''" | (!"'" ~ ANY) )* ~ "'" }
number_literal  = @{ hex_literal | (int_literal ~ ("." ~ digit*)? ~ (^"e" ~ int_literal)?) }
int_literal     = @{ ("+" | "-")? ~ digit+ }
hex_literal     = @{ "0x"  ~ hexdigit+ }
cblock          = @{ "{" ~ ((!("}" | "{") ~ ANY) | cblock )* ~ "}" }

// keywords

keyword    = {
    exported    |
    key_shared  |
    key_const   |
    key_packed  |
    key_mut     |
    key_ptr     |
    key_for     |
    key_if      |
    key_else    |
    key_return  |
    key_goto
}

exported    = { "export" }
key_shared  = { "pub" }
key_const   = { "const"   }
key_packed  = { "packed"   }
key_mut     = { "mutable" | "mut" }
key_ptr     = { "*" }
key_for     = { "for"}
key_if      = { "if" }
key_else    = { "else" }
key_return  = { "return" }
key_goto    = { "goto" }

// type identifiers

ident       = @{!(keyword ~ !alpha) ~ ((alpha | "_") ~ (alpha | digit | "_")*)}
qident_inner= ${( (!")" ~ ANY) )*}
qident      = @{ "(" ~ qident_inner ~ ")" }
star        = @{ "*" }
local_i     = {(ident | qident) ~ ( WHITESPACE+  ~ "as" ~ WHITESPACE+ ~ (ident | qident))?}
local       = { "{" ~ WHITESPACE* ~ local_i ~ WHITESPACE* ~ ("," ~ WHITESPACE* ~ local_i )* ~ WHITESPACE* ~ ","? ~ WHITESPACE*~ "}" }
namespace   = ${ ident ~ "::" ~ namespace? }
name        = ${ ident ~ ( "::" ~ (local | name))? }

typ = ${
    namespace? ~ (ident | qident) ~ key_ptr?
}

// declarations

var         = @{ident}
named_arg   = {(key_const | key_mut)? ~ typ ~ var}
anon_arg    = {(key_const | key_mut)? ~ typ}

fn_args     = {named_arg ~ ( "," ~ named_arg)* ~ ","? }
ret_arg     = {"->" ~ anon_arg}
function    = { ( exported | key_shared)? ~ "fn" ~ ident ~ "(" ~ fn_args? ~")" ~ ret_arg? ~ block }

import      = { exported? ~  "using" ~ name ~  ";"? }
path        = { ('a'..'z' | '0'..'9' | "/" | "." | "-" | "_" )+ }
syspath     = @{"<" ~ path ~ ">"}
localpath   = @{"\"" ~ path ~ "\""}
include     = { "#include" ~ (syspath | localpath) }

pp          = { ppif | ppelse | ppelif | ppendif }
ppif        = ${ "#if" ~ WHITESPACE+ ~ termish ~ WHITESPACE+}
ppelif      = ${ "#elif" ~ WHITESPACE+ ~ termish ~ WHITESPACE+}
ppelse      = ${ "#else" ~ WHITESPACE+ }
ppendif     = ${ "#endif" ~ WHITESPACE+}


field_array =  { "[" ~ (name | int_literal | hex_literal) ~ "]" }
struct_f    = { ident ~ field_array? ~ ";" }
field       = { typ ~ struct_f }
struct_c    = _{"{" ~ (pp | field)* ~ "}" }
struct_d    = { (exported | key_shared | key_packed)* ~ "struct" ~ ident ~ struct_c ~ ";"?}

constant    = { ( exported | key_shared)? ~ "const"  ~ typ ~ ident ~ "=" ~ expr ~ ";"}

key_static  = {"static"}
key_atomic  = {"atomic"}
key_thread_local = {"thread_local"}

istatic     = {
    ( exported | key_shared)? ~
    (key_static | key_atomic | key_thread_local) ~
    (key_mut | key_const)? ~
    typ ~ ident ~ "=" ~ expr ~ ";"
}

comment     = @{ "//" ~ (!"\n"  ~ ANY)*  ~ "\n" }

vararg          = @{"..."}
macro_args      = {ident ~ ( "," ~ ( ident | vararg) )* }
imacro          = { ( exported | key_shared)? ~ "macro" ~ ident ~ "(" ~ macro_args? ~")" ~ block }




// statements

infix = {
    moreeq | lesseq |
    equals | nequals |
    shiftleft | shiftright |
    add | subtract | multiply | divide | power | boolor |
    booland | lessthan | morethan | modulo | bitand | bitor
    }
    equals      = { "==" }
    nequals     = { "!=" }
    add         = { "+"  }
    subtract    = { "-"  }
    multiply    = { "*"  }
    divide      = { "/"  }
    power       = { "^"  }
    booland     = { "&&" }
    boolor      = { "||" }
    moreeq      = { ">=" }
    lesseq      = { "<=" }
    lessthan    = { "<"  }
    morethan    = { ">"  }
    shiftleft   = { "<<" }
    shiftright  = { ">>" }
    modulo      = { "%"  }
    bitand      = { "&"  }
    bitor       = { "|"  }

preop   = { "!!" | "!" | "~" | "++" | "--" }
postop  = { "++" | "--" }

term    = _{
    call | number_literal | char_literal | string_literal | struct_init | array_init | member_access |
    unarypost | unarypre | ptr_access | array_access | takeref | deref | cast | name | "(" ~ expr ~ ")"
}
expr    = { term ~ (infix ~ term) * }
termish  = !{ term }

unarypost       = { ( name | "(" ~ expr ~ ")") ~ postop}
unarypre        = { preop  ~ termish}
deref           = { "*"  ~ termish}
takeref         = { "&"  ~ termish}

member_access   = { (name | "(" ~ expr ~ ")") ~ "." ~ termish}
ptr_access      = { (name | "(" ~ expr ~ ")") ~ "->" ~ termish}
array_access    = { (name | "(" ~ expr ~ ")") ~ array }
cast            = { "(" ~ typ ~ ")" ~ termish }

struct_init_field_name = _{ "." ~ ident }
struct_init_field = { struct_init_field_name ~ "=" ~ termish }
struct_init     = { name ~ "{" ~  struct_init_field? ~ ("," ~ struct_init_field)* ~ ","?  ~ "}" }
array_init      = { "{" ~ termish ~ ("," ~ termish)* ~ ","?  ~ "}" }

assignop    = { "!=" | "~=" | "|=" | "&=" | "+=" | "-=" | "="}
assign      = { termish ~ assignop ~ expr}
call        = { ( name | "(" ~ expr ~ ")") ~ "(" ~ call_args? ~ ")" }
call_args   = { expr ~ ( "," ~ expr )* }

array       = { "[" ~ expr ~ "]" }
vardecl     = { typ ~ name ~ array? ~ ( "=" ~ expr )? }

semicolon   = { ";" }
for_stm     = { "for" ~ "(" ~ expr_stm? ~ semicolon ~ expr_stm? ~ semicolon ~ expr_stm? ~ ")" ~ block }
if_stm      = { "if"  ~ "(" ~ expr  ~ ")" ~ block }
elseif_stm  = { "else" ~ "if" ~ "(" ~ expr  ~ ")" ~ block }
else_stm    = { "else" ~  block }
return_stm  = { key_return ~ expr_stm? }
goto_stm    = { "goto" ~ ident }
label       = ${ ident ~ ":"}

expr_stm = _{
    vardecl |
    assign |
    expr
}

statement = _{
    pp          |
    for_stm     |
    if_stm      |
    else_stm    |
    elseif_stm  |
    (goto_stm  ~ ";")   |
    (return_stm ~ ";")  |
    (expr_stm ~ ";") |
    label
}

block = { "{" ~ (statement)* ~ expr_stm? ~ "}" }






// file


file        = { SOI ~ (struct_d
                        | function
                        | import
                        | constant
                        | include
                        | pp
                        | comment
                        | imacro
                        | istatic
                        | NEWLINE )+  ~ EOI}

