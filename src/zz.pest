WHITESPACE  = _{ " " | NEWLINE}
COMMENT     = _{
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/") |
    ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE)
}


// literals

alpha       = { 'a'..'z' | 'A'..'Z' }
digit       = { '0'..'9' }
hexdigit    = { '0'..'9' | 'a'..'f' }

string_literal  = @{ "\"" ~ ( "\"\"" | "\\\""    | (!"\"" ~ ANY) )* ~ "\"" }
char_literal    = @{ "'" ~ ( "''" | (!"'" ~ ANY) )* ~ "'" }
number_literal  = @{ hex_literal | (int_literal ~ ("." ~ digit*)? ~ (^"e" ~ int_literal)?) }
int_literal     = @{ ("+" | "-")? ~ digit+ }
hex_literal     = @{ "0x"  ~ hexdigit+ }
cblock          = @{ "{" ~ ((!("}" | "{") ~ ANY) | cblock )* ~ "}" }

// keywords

keyword    = {
    exported     |
    key_shared   |
    key_const    |
    key_packed   |
    key_mut      |
    key_for      |
    key_while    |
    key_if       |
    key_else     |
    key_return   |
    key_mark     |
    key_break    |
    key_continue |
    key_unsafe   |
    key_default  |
    key_switch   |
    key_goto
}

exported    = { "export" }
key_shared  = { "pub" }
key_const   = { "const"   }
key_packed  = { "packed"   }
key_mut     = { "mutable" | "mut" }
key_for     = { "for"}
key_while   = { "while"}
key_if      = { "if" }
key_else    = { "else" }
key_return  = { "return" }
key_continue= { "continue" }
key_mark    = { "is" }
key_goto    = { "goto" }
key_switch  = { "switch" }
key_break   = { "break" }
key_default = { "default" }
key_unsafe  = { "unsafe" }

// type identifiers

ident       = @{!(keyword ~ !(alpha | "_")) ~ ((alpha | "_") ~ (alpha | digit | "_")*)}
qident_inner= ${( (!")" ~ ANY) )*}
qident      = @{ "(" ~ qident_inner ~ ")" }
star        = @{ "*" }
local_i     = {(ident | qident) ~ ( WHITESPACE+  ~ "as" ~ WHITESPACE+ ~ (ident | qident))?}
local       = { "{" ~ WHITESPACE* ~ local_i ~ WHITESPACE* ~ ("," ~ WHITESPACE* ~ local_i )* ~ WHITESPACE* ~ ","? ~ WHITESPACE*~ "}" }
namespace   = ${ ident ~ "::" ~ namespace? }

type_name   = ${ namespace? ~ ident }
tag_name    = ${ (ident | key_mut | key_unsafe) ~ ("<" ~ ident ~ ">")? }
ptr         = !{"*"}
type_part   = _{ (tag_name | ptr ) }
anon_type   = !{ type_name ~ type_part* }
named_type  = !{ type_name ~ named_typei}
named_typei = _{ type_part  ~ named_typei | ident }


// declarations

fn_args     = { named_type ~ ( "," ~ named_type )* ~ ( "," ~ vararg)? ~  ","? }
ret_arg     = {"->" ~ anon_type }
function    = { ( exported | key_shared)? ~ "fn" ~ ident ~ "(" ~ fn_args? ~")" ~ ret_arg? ~ block }


enum_i      = { ident ~ ( "=" ~ int_literal)? }
enum_list   = _{ (pp | enum_i ) ~ "," ~ enum_list | pp | enum_i  }
ienum       = { (exported | key_shared)? ~ "enum" ~ ident ~ "{" ~ enum_list? ~ ","?  ~ "}"  }

cimport     = ${ ("<" ~ (!">" ~ ANY)* ~ ">") | ("\"" ~ (!"\"" ~ ANY)* ~ "\"")  }
importalias = { "as" ~ ident }
importname  = ${ ( ident | cimport ) ~ ( "::" ~ (local | importname))? }
import      = { exported? ~  "using" ~ importname ~  importalias?  ~ ";"? }
path        = { ('a'..'z' | '0'..'9' | "/" | "." | "-" | "_" )+ }
syspath     = @{"<" ~ path ~ ">"}
localpath   = @{"\"" ~ path ~ "\""}

pp          = { ppif | ppelse | ppelif | ppendif }
ppif        = ${ "#if" ~ WHITESPACE+ ~ termish ~ WHITESPACE+}
ppelif      = ${ "#elif" ~ WHITESPACE+ ~ termish ~ WHITESPACE+}
ppelse      = ${ "#else" ~ WHITESPACE+ }
ppendif     = ${ "#endif" ~ WHITESPACE+}


struct_f    = { named_type  ~ array? ~ ";" }
struct_c    = _{"{" ~ (pp | struct_f )* ~ "}" }
struct_d    = { (exported | key_shared | key_packed)* ~ "struct" ~ ident ~ struct_c ~ ";"?}

constant    = { ( exported | key_shared)? ~ "const"  ~ named_type ~ "=" ~ expr ~ ";"}

key_static  = {"static"}
key_atomic  = {"atomic"}
key_thread_local = {"thread_local"}

istatic     = {
    (exported | key_shared)? ~
    (key_static | key_atomic | key_thread_local) ~
    named_type  ~ array? ~ "=" ~ expr ~ ";"
}

comment     = @{ "//" ~ (!"\n"  ~ ANY)*  ~ "\n" }

vararg          = @{"..."}
macro_args      = {ident ~ ( "," ~ ( ident | vararg) )* }
imacro          = { ( exported | key_shared)? ~ "macro" ~ ident ~ "(" ~ macro_args? ~")" ~ block }




// statements

infix = {
    moreeq | lesseq |
    equals | nequals |
    shiftleft | shiftright |
    add | subtract | multiply | divide | power | boolor |
    booland | lessthan | morethan | modulo | bitand | bitor
    }
    equals      = { "==" }
    nequals     = { "!=" }
    add         = { "+"  }
    subtract    = { "-"  }
    multiply    = { "*"  }
    divide      = { "/"  }
    power       = { "^"  }
    booland     = { "&&" }
    boolor      = { "||" }
    moreeq      = { ">=" }
    lesseq      = { "<=" }
    lessthan    = { "<"  }
    morethan    = { ">"  }
    shiftleft   = { "<<" }
    shiftright  = { ">>" }
    modulo      = { "%"  }
    bitand      = { "&"  }
    bitor       = { "|"  }

preop   = { "!!" | "!" | "~" | "++" | "--" }
postop  = { "++" | "--" }

term    = _{
    unarypost | call | number_literal | char_literal | string_literal | struct_init | array_init | member_access |
    unarypre | ptr_access | array_access | takeref | deref | cast | type_name | "(" ~ expr ~ ")"
}
expr    = { term ~ (infix ~ term) * }
termish  = !{ term }

unarypost       = { ( type_name | "(" ~ expr ~ ")") ~ postop }
unarypre        = { preop  ~ termish}
deref           = { "*"  ~ termish}
takeref         = { "&"  ~ termish}

member_access   = { (type_name | "(" ~ expr ~ ")") ~ "." ~ ident }
ptr_access      = { (type_name | "(" ~ expr ~ ")") ~ "->" ~ ident}
array_access    = { (type_name | "(" ~ expr ~ ")") ~ array }
cast            = { "as" ~ "<" ~ anon_type ~ ">" ~ termish | "(" ~ anon_type ~ ")" ~ termish }

struct_init_field_name = _{ "." ~ ident }
struct_init_field = { struct_init_field_name ~ "=" ~ termish }
struct_init     = { anon_type ~ "{" ~  struct_init_field? ~ ("," ~ struct_init_field)* ~ ","?  ~ "}" }
array_init      = { "{" ~ termish ~ ("," ~ termish)* ~ ","?  ~ "}" }

assignop    = { "!=" | "~=" | "|=" | "&=" | "+=" | "-=" | "="}
lhs         = {
    member_access | unarypost | unarypre | ptr_access | array_access | takeref | deref | type_name | "(" ~ expr ~ ")"
}
assign      = { lhs ~ assignop ~ expr}
call        = { ( type_name | "(" ~ expr ~ ")") ~ "(" ~ call_args? ~ ")"  }
call_args   = { expr ~ ( "," ~ expr )* }

array       = { "[" ~ expr? ~ "]" }
vardecl     = { named_type  ~ array? ~ ( "=" ~ expr )? }

semicolon   = { ";" }
stm_list    = _{ expr_stm ~ "," ~ stm_list | expr_stm }
for_stm     = { "for" ~ "(" ~ stm_list? ~ semicolon ~ stm_list? ~ semicolon ~ stm_list? ~ ")" ~ block }
while_stm   = { "while" ~ expr ~ block }
case_stm    = { (expr | key_default) ~ "=>" ~ block }
switch_stm  = { "switch" ~ expr ~ "{" ~ case_stm* ~ "}"}
if_stm      = { "if"  ~ expr  ~ block }
elseif_stm  = { "else" ~ "if" ~ "(" ~ expr  ~ ")" ~ block }
else_stm    = { "else" ~  block }
return_stm  = { key_return ~ expr_stm? }
continue_stm  = { key_continue }
break_stm   = { key_break }
goto_stm    = { "goto" ~ ident }
label       = ${ ident ~ ":"}
mark_stm    = { lhs ~ "is" ~ tag_name }
unsafe_block = {"unsafe" ~ block }

expr_stm = _{
    vardecl |
    assign |
    expr
}


term_statement = _{
    mark_stm   |
    goto_stm   |
    return_stm |
    break_stm  |
    continue_stm |
    expr_stm
}

statement = _{
    switch_stm  |
    for_stm     |
    if_stm      |
    while_stm   |
    else_stm    |
    elseif_stm  |
    block       |
    unsafe_block |
    (term_statement ~ ";")
}

block = { "{" ~ (pp | statement | label)* ~ expr_stm? ~ "}" }






// file


file        = { SOI ~ (struct_d
                        | function
                        | ienum
                        | import
                        | constant
                        | pp
                        | comment
                        | imacro
                        | istatic
                        | NEWLINE )+  ~ EOI}

