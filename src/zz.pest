WHITESPACE  = _{ " " | NEWLINE}
COMMENT     = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

alpha       = { 'a'..'z' | 'A'..'Z' }
digit       = { '0'..'9' }

exported    = { "export" }
key_shared  = { "pub" }
key_const   = { "const"   }
key_packed  = { "packed"   }
key_mut     = { "mutable" | "mut" }
key_ptr     = { "*" }

string_literal  = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }
int_literal     = @{ digit+ }

ident       = @{ (alpha | "_") ~ (alpha | digit | "_")* }
star        = @{ "*" }
local_i     = {ident ~ ( WHITESPACE+  ~ "as" ~ WHITESPACE+ ~ ident)?}
local       = { "{" ~ WHITESPACE* ~ local_i ~ WHITESPACE* ~ ("," ~ WHITESPACE* ~ local_i )* ~ WHITESPACE* ~ ","? ~ WHITESPACE*~ "}" }
namespace   = ${ ident ~ "::" ~ namespace? }
name        = ${ ident ~ ( "::" ~ (local | name))? }

typ = ${
    namespace? ~ ident ~ key_ptr?
}

var         = @{ident}
named_arg   = {(key_const | key_mut)? ~ typ ~ var}
anon_arg    = {(key_const | key_mut)? ~ typ}

fn_args     = {named_arg ~ ( "," ~ named_arg)* ~ ","? }
ret_arg     = {"->" ~ anon_arg}
function    = { ( exported | key_shared)? ~ "fn" ~ ident ~ "(" ~ fn_args? ~")" ~ ret_arg? ~ block }
block       = @{ "{" ~ ((!("}" | "{") ~ ANY) | block )* ~ "}" }

import      = { exported? ~  "using" ~ name ~  ";"? }
path        = { ('a'..'z' | '0'..'9' | "/" | "." | "-" | "_" )+ }
syspath     = @{"<" ~ path ~ ">"}
localpath   = @{"\"" ~ path ~ "\""}
include     = { "#include" ~ (syspath | localpath) }


field_array =  { "[" ~ (name | int_literal) ~ "]" }
struct_f    = { ident ~ field_array? ~ ";" }
field       = { typ ~ struct_f }
struct_c    = _{"{" ~ field* ~ "}" }
struct_d    = { (exported | key_shared | key_packed)* ~ "struct" ~ ident ~ struct_c ~ ";"?}

expression  = @{(!(";"| "/*")  ~ ANY)*}
constant    = { ( exported | key_shared)? ~ "const"  ~ typ ~ ident ~ "=" ~ expression   ~ ";"}

key_static  = {"static"}
key_atomic  = {"atomic"}
key_thread_local = {"thread_local"}

istatic     = {
    ( exported | key_shared)? ~
    (key_static | key_atomic | key_thread_local) ~
    (key_mut | key_const)? ~
    typ ~ ident ~ "=" ~ expression ~ ";"
}

comment     = @{ "//" ~ (!"\n"  ~ ANY)*  ~ "\n" }

vararg      = @{"..."}
call_args   = {ident ~ ( "," ~ ( ident | vararg) )* }
macroimports = { "using" ~ name }
imacro      = { ( exported | key_shared)? ~ "macro" ~ macroimports* ~ ident ~ "(" ~ call_args? ~")" ~ block }

file        = { SOI ~ (struct_d
                        | function
                        | import
                        | constant
                        | include
                        | comment
                        | imacro
                        | istatic
                        | NEWLINE )+  ~ EOI}

