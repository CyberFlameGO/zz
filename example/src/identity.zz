using math;
using libc::stdint::{ uint32_t };
using libc::stdio::{printf} ;

using constants::{foo};
using errors::{error};
using constants::{ADD_IMPL};

using main;

static uint32_t wuast  = 9;
static mutable uint32_t counter = 1;


pub fn some_helper(mutable error* err, mutable uint32_t* bob) -> uint32_t {
    counter++;
    printf("lol\n");
    if (bob) {
        *bob = add(horst(), foo);
        printf("bob %d\n", *bob);
    }
    return ADD_IMPL(32, wuast);
}

fn horst() -> uint32_t {
    printf("wee? %f\n", main_gimme_wee());
    return ADD_IMPL(3, 3);
}




const int conflict = 1;


const char* lol = "bob";
