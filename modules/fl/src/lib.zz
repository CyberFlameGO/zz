using libc::string::{memset};
using libc::stdint::{size_t, uint8_t};
using libc::stdlib::{abort};
using libc::stdio;

struct Pool {
    size_t      slab;
    size_t      count;
    uint8_t*    free;
    uint8_t*    pool;
}

pub macro using fl::{Pool} pool (NAME, SLAB, COUNT) {
    char NAME [sizeof(fl_Pool) + SLAB * COUNT + COUNT/8 + 1] = {0};
    {
        fl_Pool *self = (fl_Pool*) NAME;

        self->slab  = SLAB;
        self->count = COUNT;
        self->free  = ((uint8_t*)NAME) + sizeof(fl_Pool);
        self->pool  = self->free + COUNT/8 + 1;
    }
}

pub fn new(mut char* b) -> void* {
    Pool *self = (Pool*)b;
    for (int i = 0; i < self->count; i++ ) {
        if ((self->free[i/8] & (1 << (i%8))) == 0) {
            self->free[i/8] |= (1 << (i%8));
            return self->pool + (i * self->slab);
        }
    }
    return 0;
}

pub fn delete(mut char* b, void* mem) -> void* {
    Pool *self = (Pool*)b;

    size_t slot = ((uint8_t*)mem - self->pool) / self->slab;

    if (slot >= self->count || (self->pool + (self->slab * slot)) != mem) {
        fprintf(stderr, "internal error: pointer passed to fl:free was never allocated from this fl pool\n");
        abort();
    }

    self->free[slot / 8] &= ~(1 << (slot % 8));

    return 0;
}


