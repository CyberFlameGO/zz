using <stdarg.h>::{va_list, va_start, va_end};
using <stdio.h>::{vfprintf, fprintf, stderr};


export fn error(char * callsite_source<module> module, char *fmt, ...)
{
    fprintf(stderr, "[\x1B[31mERR\x1B[0m] %s ", module);
    va_list mut args;
    va_start (args, fmt);
    vfprintf(
        stderr,
        fmt,
        args
    );
    va_end (args);
    fprintf(stderr, "\n");
}

export fn warn(char * callsite_source<module> module, char *fmt, ...)
{
    fprintf(stderr, "[\x1B[33mWRN\x1B[0m] %s ", module);
    va_list mut args;
    va_start (args, fmt);
    vfprintf(
        stderr,
        fmt,
        args
    );
    va_end (args);
    fprintf(stderr, "\n");
}

export fn info(char * callsite_source<module> module, char *fmt, ...)
{
    fprintf(stderr, "[\x1B[32mINF\x1B[0m] %s ", module);
    va_list mut args;
    va_start (args, fmt);
    vfprintf(
        stderr,
        fmt,
        args
    );
    va_end (args);
    fprintf(stderr, "\n");
}

export fn debug(char * callsite_source<module> module, char *fmt, ...)
{
    fprintf(stderr, "[\x1B[36mDBG\x1B[0m] %s ", module);
    va_list mut args;
    va_start (args, fmt);
    vfprintf(
        stderr,
        fmt,
        args
    );
    va_end (args);
    fprintf(stderr, "\n");
}

