inline using "lib.h" as libc;

pub fn memcpy(void mut * dst, void *src, usize n)
    where len(dst) >= n
    where len(src) >= n
{
    libc::memcpy(dst, src, n);
}

pub fn memset(void mut * dst, u8 c, usize n)
    where len(dst) >= n
{
    libc::memset(dst, c, n);
}

export fn assert(
        char* callsite_macro<__FILE__>      unsafe file,
        char* callsite_macro<__FUNCTION__>  unsafe scope,
        int   callsite_macro<__LINE__>      line,
        bool  condition)
{
    if !condition {
        libc::fprintf(libc::stderr, "fatal error: assertion failed in %s:%d \t%si\n", file, line, scope);
        libc::abort();
    }
}

