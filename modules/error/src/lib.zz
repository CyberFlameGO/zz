using <stdint.h>::{uint8_t};
using <stdio.h>::{printf, snprintf, vsnprintf, fprintf, stderr};
using <string.h>::{memset, strncat};
using <errno.h>::{errno};
using <stdlib.h>::{abort as cabort};
using <stdarg.h>::{va_list, va_start};

export struct Error {
    uint8_t error;
    char    description[255];
    char    locations[255];
};

pub fn check(
        Error unset<error> mut* err,
        char* callsite_macro<__FILE__>      file,
        char* callsite_macro<__FUNCTION__>  scope,
        int   callsite_macro<__LINE__>      line,
        ) -> int {
    if ((err)->error != 0) {
        snprintf(
                (char mut*)(&((err)->locations)) + strlen((err)->locations),
                sizeof((err)->locations) - strlen((err)->locations),
                "\n  %s:%d \t%s", file, line, scope);
        return (err)->error;
    }
    return 0;
}

pub fn fail_with_errno(
        Error unset<error> set<Error> mut* err,
        char* callsite_macro<__FILE__>      file,
        char* callsite_macro<__FUNCTION__>  scope,
        int   callsite_macro<__LINE__>      line,
        char*  fmt,
        ...
        ) {

    (err)->error = errno;

    va_list mut vargs;
    va_start(vargs, fmt);
    vsnprintf((err)->description, sizeof((err)->description), fmt, vargs);

    strncat((err)->description, " : ", sizeof((err)->description) - strlen((err)->description));
    strncat((err)->description, strerror(errno), sizeof((err)->description) - strlen((err)->description));

    memset((err)->locations, 0, sizeof((err)->locations));

    snprintf(
            (char mut*)(&((err)->locations)) + strlen((err)->locations),
            sizeof((err)->locations) - strlen((err)->locations),
            "\n  %s:%d \t%s", file, line, scope);
}

pub fn fail(
        Error unset<error> set<Error> mut* err,
        uint8_t e,
        char* callsite_macro<__FILE__>      file,
        char* callsite_macro<__FUNCTION__>  scope,
        int   callsite_macro<__LINE__>      line,
        char*  fmt,
        ...
        ) {

    (err)->error = e;

    va_list mut vargs;
    va_start(vargs, fmt);
    vsnprintf((err)->description, sizeof((err)->description), fmt, vargs);

    memset((err)->locations, 0, sizeof((err)->locations));

    snprintf(
            (char mut*)(&((err)->locations)) + strlen((err)->locations),
            sizeof((err)->locations) - strlen((err)->locations),
            "\n  %s:%d \t%s", file, line, scope);
}

export fn abort(
        Error unset<error> mut* err,
        char* callsite_macro<__FILE__>      file,
        char* callsite_macro<__FUNCTION__>  scope,
        int   callsite_macro<__LINE__>      line,
) {
    if (err->error != 0) {
        snprintf(
                (char mut*)&((err)->locations) + strlen((err)->locations),
                sizeof((err)->locations) - strlen((err)->locations),
                "\n  %s:%d \t%s", file, line, scope);
        fprintf(stderr, "fatal error: %s%s\n", err->description, err->locations);
        cabort();
    }
}
