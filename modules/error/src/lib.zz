using <stdint.h>::{uint8_t};
using <stdio.h>::{printf, snprintf, vsnprintf};
using <string.h>::{memset};
using <errno.h>::{errno};
using <stdlib.h>::{abort};
using <stdarg.h>::{va_list, va_start};

export struct Error {
    uint8_t error;
    char    description[255];
    char    locations[255];
};

pub fn via (
        Error mut* err,
        //char* callsite<__FILE__>      file,
        //char* callsite<__FUNCTION__>  scope,
        //int   callsite<__LINE__>      line,
        char*  _callsite_file           file,
        char*  _callsite_function       scope,
        int    _callsite_line           line,
        ) -> int {
    if ((err)->error != 0) {
        snprintf(
                (char mut*)(&((err)->locations)) + strlen((err)->locations),
                sizeof((err)->locations) - strlen((err)->locations),
                "\n  %s:%d %s", file, line, scope);
        return (err)->error;
    }
    return 0;
}

pub fn fail(
        Error mut via* err,
        uint8_t e,
        char*  _callsite_file           file,
        char*  _callsite_function       scope,
        int    _callsite_line           line,
        char*  fmt,
        ...
        ) {

    (err)->error = e;

    va_list mut vargs;
    va_start(vargs, fmt);
    vsnprintf((err)->description, sizeof((err)->description), fmt, vargs);

    memset((err)->locations, 0, sizeof((err)->locations));

    snprintf(
            (char mut*)(&((err)->locations)) + strlen((err)->locations),
            sizeof((err)->locations) - strlen((err)->locations),
            "\n  %s:%d %s", file, line, scope);
}

export macro ABORT(err) {
    if (err->error != 0) {
        snprintf(
                (char mut*)&((err)->locations) + strlen((err)->locations),
                sizeof((err)->locations) - strlen((err)->locations),
                "\n  %s:%d %s", __FILE__, __LINE__, __FUNCTION__);
        fprintf(stderr, "%s%s\n", err->description, err->locations);
        abort();
    }
}
