using <stdio.h>::{printf, snprintf, vsnprintf, fprintf, stderr};
using <string.h>::{memset, strncat, strlen};
using <errno.h>::{errno, strerror};
using <stdlib.h>::{abort as cabort};
using <stdarg.h>::{va_list, va_start};
using string::{String};
using string;

pub theory checked(Err * self) -> bool;

export struct Err+ {
    u8      mut error;
    char    mut description[255];
    String+ mut locations;
};


export fn new(Err+tail mut *self)
    model checked(*self)
{
    memset(self, 0, sizeof(Err));
    string::clear(&(self->locations));
    static_attest(checked(*self));
}

export  fn check(
        Err+tail mut* self,
        char* callsite_source<file>      unsafe file,
        char* callsite_source<function>  unsafe scope,
        usize callsite_source<line>      line,
) -> bool
    model checked(*self)
{
    if (self->error != 0) {
        backtrace(self, file, scope, line);
        static_attest(checked(*self));
        return true;
    }
    return false;
}


export fn backtrace(Err+tail mut* self, char * unsafe file, char * unsafe scope, usize line)
{
    if tail > 0 {
        static_attest((self->locations).len < tail);
        string::format(&(self->locations), "\n  %s:%zu \t%s", file, line, scope);
    }
}

export fn fail_with_errno(
        Err+tail mut* self,
        char* callsite_source<file>      unsafe file,
        char* callsite_source<function>  unsafe scope,
        usize callsite_source<line>      line,
        char*  fmt,
        ...
)
    where checked(*self)
    model checked(*self)
{
    self->error = (u8)errno;

    va_list mut vargs;
    va_start(vargs, fmt);
    vsnprintf(self->description, sizeof(self->description), fmt, vargs);

    strncat(self->description, " : ", as<usize>(sizeof(self->description)) - as<usize>(strlen(self->description)));
    strncat(self->description, strerror(errno), as<usize>(sizeof(self->description)) - as<usize>(strlen(self->description)));

    string::clear(&(self->locations));
    backtrace(self, file, scope, line);
    static_attest(checked(*self));
}

export fn fail(
        Err+tail mut* self,
        u8  e,
        char* callsite_source<file>      unsafe file,
        char* callsite_source<function>  unsafe scope,
        usize callsite_source<line>      line,
        char*  fmt,
        ...
)
    where checked(*self)
    model checked(*self)
{
    self->error = e;

    va_list mut vargs;
    va_start(vargs, fmt);
    vsnprintf(self->description, sizeof(self->description), fmt, vargs);

    string::clear(&(self->locations));
    backtrace(self, file, scope, line);
    static_attest(checked(*self));
}

export fn abort(
        Err+tail mut* self,
        char* callsite_source<file>      unsafe file,
        char* callsite_source<function>  unsafe scope,
        usize callsite_source<line>      line,
)
model checked(*self)
{
    if (self->error != 0) {
        static_attest(checked(*self));
        backtrace(self, file, scope, line);
        fprintf(stderr, "fatal error %u: %s%s\n", self->error, self->description, (self->locations).mem);
        cabort();
    }
    static_attest(checked(*self));
}

export fn eprint(Err+tail mut* self)
{
    fprintf(stderr, "error %u: %s%s\n", self->error, self->description, (self->locations).mem);
}

export fn to_str(
    Err mut* self,
    char mut *dest,
    usize dest_len,
)
{
    snprintf(dest, dest_len, "%s%s\n", self->description, (self->locations).mem);
}
