using <stdio.h>::{printf};
inline using "lib.h";

pub inline fn bswap_16(u16 x) -> u16
{
    return x<<8 | x>>8;
}

export inline fn bswap_32(u32 x) -> u32
{
    return x>>24 | ( (x >> 8) & 0xff00) | ((x<<8) & 0xff0000) | x<<24;
}

pub inline fn bswap_64(u64 x) -> u64
{
    unsafe {
        return (bswap_32(x) + ((u64)0)) <<32 | bswap_32(x>>32);
    }
}


// host to big endian

pub inline fn to_be16(u16 x) -> u16 {
    @{{
        #if BYTE_ORDER == LITTLE_ENDIAN
            return byteorder_bswap_16(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_be16(u16 x) -> u16 {
    return to_be16(x);
}

pub inline fn to_be32(u32 x) -> u32{
    @{{
        #if BYTE_ORDER == LITTLE_ENDIAN
            return byteorder_bswap_32(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_be32(u32 x) -> u32 {
    return to_be32(x);
}

pub inline fn to_be64(u64 x) -> u64 {
    @{{
        #if BYTE_ORDER == LITTLE_ENDIAN
            return byteorder_bswap_64(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_be64(u64  x) -> u64 {
    return to_be64(x);
}



// host to little endian

pub inline fn to_le16(u16 x) -> u16 {
    @{{
        #if BYTE_ORDER == BIG_ENDIAN
            return byteorder_bswap_16(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_le16(u16 x) -> u16 {
    return to_le16(x);
}

pub inline fn to_le32(u32 x) -> u32{
    @{{
        #if BYTE_ORDER == BIG_ENDIAN
            return byteorder_bswap_32(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_le32(u32 x) -> u32 {
    return to_le32(x);
}

pub inline fn to_le64(u64 x) -> u64 {
    @{{
        #if BYTE_ORDER == BIG_ENDIAN
            return byteorder_bswap_64(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_le64(u64 x) -> u64 {
    return to_le64(x);
}




