using <string.h> as c_string;

export struct Slice {
    usize   size;
    u8 *    mem;
}

export struct MutSlice {
    usize   at;
    usize   size;
    u8 mut* mem;
}

export fn new(u8 mut*mem, usize size) -> Slice
    where len(mem) >= size
{
    return Slice {
        size:   size,
        mem:    mem,
    };
}

export fn new_mut(u8 mut*mem, usize size) -> MutSlice
    where len(mem) >= size
{
    return MutSlice {
        at:     0,
        size:   size,
        mem:    mem,
    };
}

export fn push(MutSlice mut * self, u8 b) -> bool
    where self->size >= 1
    model self->at <= self->size
{
    static_attest(self->size == len(self->mem));
    static_attest(self->at   <= self->size);

    if self->at > self->size - 1 {
        return false;
    }

    static_attest(self->at < len(self->mem));
    self->mem[self->at] = b;
    self->at += 1;

    return true;
}

export fn push16(MutSlice mut * self, u16 b) -> bool
    where self->size >= 2
    model self->at <= self->size
{
    static_attest(self->size == len(self->mem));
    static_attest(self->at <= self->size);

    if self->at > self->size - 2 {
        return false;
    }

    static_attest(self->at < len(self->mem));
    c_string::memcpy(self->mem + self->at, &b, 2);
    self->at += 2;

    return true;
}

export fn push32(MutSlice mut * self, u32 b) -> bool
    where self->size >= 4
    model self->at <= self->size
{
    static_attest(self->size == len(self->mem));
    static_attest(self->at <= self->size);

    if self->at > self->size - 4 {
        return false;
    }

    static_attest(self->at < len(self->mem));
    c_string::memcpy(self->mem + self->at, &b, 4);
    self->at += 4;

    return true;
}

export fn push64(MutSlice mut * self, u64 b) -> bool
    where self->size > 8
    model self->at <= self->size
{
    static_attest(self->size == len(self->mem));
    static_attest(self->at <= self->size);

    if self->at > self->size - 8 {
        return false;
    }

    static_attest(self->at < len(self->mem));
    c_string::memcpy(self->mem + self->at, &b, 8);
    self->at += 8;

    return true;
}

