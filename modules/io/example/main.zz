using io;
using io::unix;
using time;
using string;
using err;

using <stdio.h>::{perror, printf};


export fn main() -> int {
    err::Err+1000 mut e;
    err::new(&e);

    unix::Async+10 mut async;
    unix::new(&async);

    io::Io mut i = unix::stdin();
    unix::make_read_async(&i, (io::Async mut*)&async);

    io::Io mut t = io::timeout((io::Async mut*)&async, &e, time::from_seconds(3));
    err::abort(&e);

    for (;;) {
        string::String+20 mut buf2;
        string::clear(&buf2);

        switch t.read(&e, &buf2) {
            io::Result::Ready => {
                err::abort(&e);

                printf("timeout\n");

                t.close();
                t = io::timeout((io::Async mut*)&async, &e, time::from_seconds(1));
                err::abort(&e);

                t.wake(&e, io::Wake::Read);
                err::abort(&e);
            }
            default => {}
        }
        err::abort(&e);

        string::String+2 mut buf;
        string::clear(&buf);
        switch i.read(&e, &buf) {
            io::Result::Ready => {
                printf(">%s<\n", buf.mem);
            }
            io::Result::Later => {}
            io::Result::Error | io::Result::Eof => {
                err::abort(&e);
                return 0;
            }
        }
        err::abort(&e);


        async.wait(&e);
        err::abort(&e);
    }
    return 0;
}

