using time;
using string;
using err;

using <stdio.h>::{printf};

export fntype select_fn  (Async mut*self, err::Err+et mut* e, Context mut*ctx, Ready w);

export struct Async {
    //make_timeout_fn
    void unsafe *make_timeout;
    //select_fn
    void unsafe *select_impl;
}


export enum Ready {
    Read,
    Write,
}

export enum Result {
    Ready,
    Later,
    Error,
    Eof,
}

export fntype read_fn  (Context mut* ctx, err::Err+et mut* e, u8 mut* to, usize mut* len) -> Result;
export fntype write_fn (Context mut* ctx, err::Err+et mut* e, u8* to, usize mut* len) -> Result;
export fntype close_fn (Context mut* ctx);


export struct Context {
    int         fd;
    void mut*   handle;
    u64         time;

    Async mut* unsafe async;
}

export struct Io {
    Context     ctx;
    read_fn     read_impl;
    write_fn    write_impl;
    close_fn    close_impl;
}


export fn is_null(Io * self) -> bool {
    return (self->ctx).fd == 0 && (self->ctx).handle == 0 && (self->ctx).time == 0 && (self->ctx).async == 0;
}

export fn read(Io mut* self, err::Err+et mut* e, string::String+st mut* str) -> Result
    where st > 1
    where err::checked(*e)
{
    static_attest(str->len < len(str->mem));

    if self->read_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->read_impl));

    usize mut l = st - str->len - 1;
    Result rr = self->read_impl(&self->ctx, e, as<u8 mut*>(str->mem + str->len), &l);
    if err::check(e) {
        return Result::Error;
    }
    if rr != Result::Ready {
        return rr;
    }
    str->len += l;
    static_attest(len(str->mem) > str->len);
    (str->mem)[str->len] = 0;
    return rr;
}

export fn readline(Io mut* self, err::Err+et mut* e, string::String+st mut* str) -> Result
    where st > 1
    where err::checked(*e)
    where st > 2
{
    if self->read_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->read_impl));

    u8 mut buf[2] = {0};
    usize mut l = 1;
    Result rr = self->read_impl(&self->ctx, e, buf, &l);
    if err::check(e) {
        return Result::Error;
    }
    if rr != Result::Ready {
        return rr;
    }

    char ch = as<char>(buf[0]);

    if ch == '\n' || ch == '\r' {
        return Result::Ready;
    }

    if !str->push(ch) {
        err::fail(e, 1, "oom");
        return Result::Error;
    }

    return Result::Later;
}

export fn write(Io mut* self, err::Err+et mut* e, string::String+st mut* str) -> Result
    where st > 1
    where err::checked(*e)
{
    static_attest(str->len < len(str->mem));
    usize mut blen = str->len;
    return write_bytes(self, e, (u8*)(str->mem), &blen);
}

export fn write_bytes(Io mut* self, err::Err+et mut* e, u8 *b, usize mut *blen) -> Result
    where err::checked(*e)
{
    if self->write_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->write_impl));

    Result rr = self->write_impl(&self->ctx, e, b, blen);
    err::check(e);
    if rr != Result::Ready {
        return rr;
    }
    return rr;
}

export fn write_cstr(Io mut* self, err::Err+et mut* e, char *b) -> Result
    where nullterm(b)
    where err::checked(*e)
{
    if self->write_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->write_impl));

    usize mut blen = string::strlen(b);

    Result rr = self->write_impl(&self->ctx, e, (u8*)b, &blen);
    err::check(e);
    if rr != Result::Ready {
        return rr;
    }
    return rr;
}

export fn close(Io mut* self)
{
    if self->close_impl == 0 {
        return;
    }
    static_attest(safe(self->close_impl));
    self->close_impl(&self->ctx);
}

export fn select(Async mut *self, err::Err+et mut* e, Context mut*ctx, Ready w)
    where err::checked(*e)
{
    if self->select_impl == 0 {
        return;
    }
    select_fn select_impl = (select_fn)self->select_impl;
    static_attest(safe(select_impl));
    select_impl(self, e, ctx, w);
}

pub fn drop(Io mut* self) {
    close(self);
}


export fntype make_timeout_fn(Async *async, err::Err+et mut*e, time::Time t2) -> Io;
// TODO cannot use self function because flatten makes it a recursive type
export fn timeout(Async mut* this, err::Err+et mut*e, time::Time t2) -> Io
    where err::checked(*e)
{
    if this->make_timeout != 0 {
        make_timeout_fn make_timeout = (make_timeout_fn)this->make_timeout;
        static_attest(safe(make_timeout));
        return make_timeout(this, e, t2);
    }
    return Io{
        read_impl: 0,
    };
}


